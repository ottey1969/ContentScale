import { useState } from "react";
import { useMutation, useQueryClient, useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { isUnauthorizedError } from "@/lib/authUtils";
import { Bot, Loader2, Sparkles, FileText, Newspaper, HelpCircle, Share2, CreditCard, DollarSign } from "lucide-react";
import PayPalButton from "@/components/PayPalButton";

export default function ContentGenerator() {
  const [topic, setTopic] = useState("");
  const [contentType, setContentType] = useState("blog");
  const [showPayment, setShowPayment] = useState(false);
  const [paymentAmount, setPaymentAmount] = useState("2.00");
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Get user data for credit display
  const { data: user } = useQuery<{ credits: number }>({
    queryKey: ['/api/auth/user'],
  });

  // Debug function to test state
  const handleInputChange = (value: string) => {
    console.log('Setting topic to:', value);
    setTopic(value);
    console.log('Topic state after set:', topic);
  };

  const generateMutation = useMutation({
    mutationFn: async () => {
      if (!topic.trim()) {
        throw new Error("Please enter a topic or keywords");
      }
      
      const payload = {
        contentType,
        topic: topic.trim(),
        title: "", // Will be generated by AI
        content: "", // Will be generated by AI
        userId: "", // Will be set by backend from auth
      };
      
      console.log('Generating content with payload:', payload);
      return await apiRequest("POST", "/api/content/generate", payload);
    },
    onSuccess: async (response) => {
      const content = await response.json();
      toast({
        title: "Content Generated Successfully!",
        description: `Created "${content.title}" with SEO score: ${content.seoScore}`,
      });
      
      // Clear form
      setTopic("");
      
      // Invalidate relevant queries
      queryClient.invalidateQueries({ queryKey: ["/api/content"] });
      queryClient.invalidateQueries({ queryKey: ["/api/dashboard/stats"] });
      queryClient.invalidateQueries({ queryKey: ["/api/activities"] });
    },
    onError: (error: any) => {
      console.error('Content generation error:', error);
      
      if (isUnauthorizedError(error)) {
        toast({
          title: "Authentication Required",
          description: "Please log in to generate content.",
          variant: "destructive",
        });
        setTimeout(() => {
          window.location.href = "/api/login";
        }, 500);
        return;
      }
      
      // Handle specific error cases
      if (error.status === 402) {
        // Payment required - show PayPal interface
        setShowPayment(true);
        setPaymentAmount("2.00");
        toast({
          title: "Payment Required",
          description: "Generate your next article for $2.00",
          variant: "default",
        });
        return;
      } else if (error.status === 429) {
        toast({
          title: "Rate Limit Exceeded",
          description: "Please try again later.",
          variant: "destructive",
        });
        return;
      }
      
      toast({
        title: "Content Generation Failed",
        description: error.message || "An unexpected error occurred",
        variant: "destructive",
      });
    },
  });

  const contentTypes = [
    { id: "blog", label: "Blog Post", icon: FileText, color: "text-primary" },
    { id: "article", label: "Article", icon: Newspaper, color: "text-secondary" },
    { id: "faq", label: "FAQ", icon: HelpCircle, color: "text-accent" },
    { id: "social", label: "Social", icon: Share2, color: "text-neural" },
  ];

  return (
    <Card className="bg-surface border-surface-light overflow-hidden">
      <CardHeader className="border-b border-surface-light">
        <CardTitle className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <Bot className="w-5 h-5 text-primary" />
            <span>AI Content Generation Hub</span>
          </div>
          <div className="text-sm text-green-400 font-normal">
            {user?.credits || 0}/3
          </div>
        </CardTitle>
      </CardHeader>
      
      <CardContent className="p-8 space-y-6">
        {/* Topic Input */}
        <div>
          <label className="text-sm font-medium text-gray-300 mb-2 block">Enter Topic or Keywords</label>
          <div style={{ fontSize: '12px', color: '#9CA3AF', marginBottom: '4px' }}>
            Current topic: "{topic}" (length: {topic.length}) - Last updated: {new Date().toLocaleTimeString()}
          </div>
          <div className="relative">
            <input
              type="text"
              placeholder="e.g., Cybersecurity best practices for SMBs"
              value={topic}
              onChange={(e) => {
                console.log('Input onChange triggered:', e.target.value);
                setTopic(e.target.value);
              }}
              onKeyDown={(e) => {
                console.log('Key pressed:', e.key);
                if (e.key === 'Enter' && !generateMutation.isPending && topic.trim()) {
                  generateMutation.mutate();
                }
              }}
              className="w-full h-12 px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              autoComplete="off"
              style={{
                zIndex: 999,
                position: "relative",
                fontSize: "16px"
              }}
            />
            <button
              onClick={(e) => {
                e.preventDefault();
                console.log('Generate button clicked, topic:', topic);
                console.log('Topic length:', topic.length);
                if (topic.trim()) {
                  console.log('Calling generateMutation.mutate()');
                  generateMutation.mutate();
                } else {
                  console.log('Topic is empty, not generating');
                }
              }}
              disabled={generateMutation.isPending || !topic.trim()}
              style={{
                position: 'absolute',
                right: '6px',
                top: '6px',
                backgroundColor: topic.trim() ? '#3B82F6' : '#6B7280',
                color: 'white',
                border: 'none',
                borderRadius: '6px',
                padding: '8px 12px',
                fontSize: '14px',
                cursor: topic.trim() ? 'pointer' : 'not-allowed',
                display: 'flex',
                alignItems: 'center',
                gap: '6px',
                fontWeight: '500',
                transition: 'all 0.2s ease'
              }}
              title={topic.trim() ? "Generate AI content from your topic" : "Enter a topic first"}
            >
              {generateMutation.isPending ? (
                <>
                  <Loader2 className="w-4 h-4 animate-spin" />
                  <span>Generating</span>
                </>
              ) : (
                <>
                  <Sparkles className="w-4 h-4" />
                  <span>Generate</span>
                </>
              )}
            </button>
          </div>
        </div>
        
        {/* Content Type Selection */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
          {contentTypes.map((type) => (
            <button
              key={type.id}
              onClick={() => setContentType(type.id)}
              className={`p-3 rounded-lg border transition-all text-center ${
                contentType === type.id
                  ? "bg-primary bg-opacity-20 border-primary"
                  : "bg-dark border-surface-light hover:border-primary"
              }`}
            >
              <type.icon className={`w-5 h-5 ${type.color} mb-1`} />
              <div className="text-xs">{type.label}</div>
            </button>
          ))}
        </div>
        
        {/* AI Preview */}
        <div style={{ backgroundColor: '#374151', padding: '16px', borderRadius: '8px' }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '12px' }}>
            <div style={{ width: '8px', height: '8px', backgroundColor: '#10B981', borderRadius: '50%', animation: 'pulse 2s infinite' }}></div>
            <span style={{ color: '#9CA3AF', fontSize: '14px' }}>AI Preview</span>
          </div>
          <div style={{ 
            color: '#FFFFFF', 
            fontSize: '14px', 
            lineHeight: '1.5', 
            maxHeight: '128px', 
            overflowY: 'auto',
            paddingRight: '8px',
            scrollbarWidth: 'thin',
            scrollbarColor: '#6B7280 #374151'
          }}>
            {generateMutation.isPending ? (
              <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
                <div style={{ height: '16px', backgroundColor: '#4B5563', borderRadius: '4px', animation: 'pulse 2s infinite' }}></div>
                <div style={{ height: '16px', backgroundColor: '#4B5563', borderRadius: '4px', width: '75%', animation: 'pulse 2s infinite' }}></div>
                <div style={{ height: '16px', backgroundColor: '#4B5563', borderRadius: '4px', width: '50%', animation: 'pulse 2s infinite' }}></div>
              </div>
            ) : topic ? (
              <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>
                <div>
                  <strong style={{ color: '#10B981' }}>Title:</strong>
                  <p style={{ marginTop: '4px' }}>"Essential {topic} Practices Every Business Must Implement in 2025"</p>
                </div>
                <div>
                  <strong style={{ color: '#8B5CF6' }}>Meta Description:</strong>
                  <p style={{ marginTop: '4px' }}>Discover proven {topic} strategies that protect businesses. Learn implementation steps, costs, and ROI for immediate impact.</p>
                </div>
                <div>
                  <strong style={{ color: '#3B82F6' }}>Keywords:</strong>
                  <div style={{ marginTop: '4px', display: 'flex', flexDirection: 'column', gap: '4px' }}>
                    <p><span style={{ color: '#3B82F6' }}>{topic}</span>, <span style={{ color: '#8B5CF6' }}>{topic} best practices</span>, <span style={{ color: '#10B981' }}>{topic} guide</span></p>
                    <p><span style={{ color: '#F59E0B' }}>{topic} implementation</span>, <span style={{ color: '#3B82F6' }}>{topic} strategy</span>, <span style={{ color: '#8B5CF6' }}>{topic} checklist</span></p>
                  </div>
                </div>
                <div>
                  <strong style={{ color: '#10B981' }}>AI Overview Potential:</strong>
                  <p style={{ marginTop: '4px', color: '#9CA3AF' }}>High - This content is optimized for AI search engines and features rich, actionable information that search algorithms prefer.</p>
                </div>
                <div>
                  <strong style={{ color: '#3B82F6' }}>SEO Score:</strong>
                  <p style={{ marginTop: '4px', color: '#9CA3AF' }}>Estimated 85/100 - Well-structured with target keywords, meta optimization, and user-focused content.</p>
                </div>
                <div>
                  <strong style={{ color: '#F59E0B' }}>Content Length:</strong>
                  <p style={{ marginTop: '4px', color: '#9CA3AF' }}>1,200-1,500 words with proper heading structure, bullet points, and actionable insights for maximum engagement.</p>
                </div>
                <div>
                  <strong style={{ color: '#8B5CF6' }}>Target Audience:</strong>
                  <p style={{ marginTop: '4px', color: '#9CA3AF' }}>Business owners, IT managers, and decision-makers looking for practical {topic} solutions.</p>
                </div>
              </div>
            ) : (
              <p style={{ color: '#9CA3AF', fontStyle: 'italic' }}>Enter a topic to see AI-generated preview...</p>
            )}
          </div>
        </div>

        {/* PayPal Payment Section */}
        {showPayment && (
          <div className="mt-6 p-4 bg-primary/10 border border-primary rounded-lg">
            <div className="flex items-center gap-2 mb-3">
              <CreditCard className="w-5 h-5 text-primary" />
              <h3 className="text-lg font-semibold">Payment Required</h3>
            </div>
            <p className="text-sm text-muted-foreground mb-4">
              Generate your next high-quality article for ${paymentAmount}. Payment processed securely via PayPal.
            </p>
            <div className="flex items-center gap-4">
              <PayPalButton
                amount={paymentAmount}
                currency="USD"
                intent="CAPTURE"
              />
              <Button
                variant="outline"
                onClick={() => setShowPayment(false)}
              >
                Cancel
              </Button>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
